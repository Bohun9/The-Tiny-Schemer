let stack = ref [] in

let fail = fun x (
	if (empty? (!stack)) then
		error
	else (
		let k = (car (!stack)) in
		(
		 (stack := (cdr (!stack)));
		 (throw k k)
		)
	)
) in

let choice = fun vals (
	let r = (ref vals) in (
	let k = (call/cc k k) in (
	if (empty? (!r)) then
		fail ()
	else (
		(stack := (cons k (!stack)));
		(let v = (car (!r)) in
		(
		 (r := (cdr (!r)));
		 v
		))
	)))
) in

let assert = fun x (
	if x then
		()
	else
		fail ()
) in

let a = choice (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 [])))))) in
let b = choice (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 [])))))) in
let c = choice (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 [])))))) in

(
 (assert (((a * a) + (b * b)) <= (c * c)));
 (assert (((a * a) + (b * b)) >= (c * c)));
 (assert (a >= b));
 (<a, <b, c>>)
)

